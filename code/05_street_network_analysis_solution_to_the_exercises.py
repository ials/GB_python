# -*- coding: utf-8 -*-
"""05 - Street Network Analysis - solution to the exercises.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wutrKeB-XhpNobSC139XXYeR_3diXfxy

# Setup
"""

try:
  import rtree
except ModuleNotFoundError as e:
  !apt-get install libspatialindex-dev
  !pip install rtree
  import rtree

!pip install osmnx

"""## Exercises
- identify the shortest path by walk to reach the Castle of Trento from the main train station
- identify how many bars you can reach by walking in 5 minutes from the main train station of Trento

# identify the shortest path by walk to reach the Castle of Trento from the main train station
- where is the castle in Trento
- where is the main train station
"""

!pip install geopy

"""## where is the castle in Trento
THe name of the castle of Trento is *Castello del Buonconsiglio*

https://en.wikipedia.org/wiki/Buonconsiglio_Castle
"""

from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="geospatial course")
location = geolocator.geocode("Castello del Buonconsiglio")

point_castle =  (location.latitude, location.longitude)

"""## where is the main train station in Trento

https://en.wikipedia.org/wiki/Trento_railway_station
"""

location = geolocator.geocode("Trento stazione fs")

point_train_station =  (location.latitude, location.longitude)

"""## create the streets walking graph"""

import osmnx as ox

G = ox.graph_from_place("Trento, Italy", network_type='walk')

fig, ax = ox.plot_graph(G)

"""## identify the shortest path

the points must connetected to the graph
"""

point_nearest_train_station= ox.get_nearest_node(G, point_train_station)
point_nearest_castle = ox.get_nearest_node(G, point_castle)

"""### add the weights of speed and travel time


check documentation [module-osmnx.speed](https://osmnx.readthedocs.io/en/stable/osmnx.html#module-osmnx.speed)

If edge *maxspeed* attribute has *“mph”* in it, value will automatically be converted from miles per hour to km per hour. 

Any other speed units should be manually converted to km per hour prior to running this function, otherwise there could be unexpected results. 

If “mph” does not appear in the edge’s maxspeed attribute string, then function assumes kph, per OSM guidelines: 

https://wiki.openstreetmap.org/wiki/Map_Features/Units

**hwy_speeds** *(dict)* 

*dict keys* = *OSM highway types and values* = typical  speeds (km per hour) to assign to edges of that highway type for any edges missing speed data. 

Any edges with highway type not in hwy_speeds will be assigned the mean preexisting speed value of all edges of that highway type.
"""

G = ox.add_edge_speeds(G)
G = ox.add_edge_travel_times(G)

"""### calculate the shortest path ;)"""

route = ox.shortest_path(G, point_nearest_train_station, point_nearest_castle, weight='travel_time')

"""### show it on the map"""

ox.plot_route_folium(G,route,popup_attribute='name',tiles='OpenStreetMap')

route

G.nodes[2591984564]

G.nodes[2591984564]['x']

from shapely.geometry import Point,LineString

points = []
for idnode in route:
  lon = G.nodes[idnode]['x']
  lat = G.nodes[idnode]['y']
  point = Point(lon,lat)
  points.append(point)

path = LineString(points)

path

import geopandas as gpd

data = {'name': ['from train station to the castle'], 'geometry': [path]}

gdf_path = gpd.GeoDataFrame(data,crs="EPSG:4326")

gdf_path.crs

gdf_path

gdf_path.plot()

gdf_path.to_file("path_trainstation2castle_trento.geojson", driver="GeoJSON")

#from google.colab import files
#files.download("path_trainstation2castle_trento.geojson")

"""# identify how many bars you can reach by walking in 5 minutes from the main train station of Trento
- download all the *amenity==bar* from OpenStreetMap
- identify the point of the train station
- calculate the distance of each bar from the train station in walking travel time distance

## download all the amenity=bar from OpenStreetMap

with osmnx
"""

point_train_station

tags = {'amenity': ['bar','cafe']}

trento_bars = ox.geometries_from_place("Trento",tags)

trento_bars.shape

"""## check the bar nearest by distance to the train stations"""

trento_bars.geometry.type.unique()

trento_bars.geometry.type.value_counts()

from shapely.ops import transform
import pyproj

wgs84 = pyproj.CRS('EPSG:4326')
utm32n = pyproj.CRS('EPSG:32632')
projection_transform = pyproj.Transformer.from_crs(wgs84, utm32n, always_xy=False).transform

shapely_point_train_station = Point(point_train_station)

point_train_station_utm32n = transform(projection_transform,shapely_point_train_station)

point_train_station_utm32n.wkt

trento_bars.geometry.to_crs(epsg=32632).representative_point().distance(point_train_station_utm32n)

trento_bars['haversine_distance_to_train_station'] = trento_bars.geometry.to_crs(epsg=32632).representative_point().distance(point_train_station_utm32n)

trento_bars.sort_values(by=['haversine_distance_to_train_station'])

trento_bars[trento_bars.haversine_distance_to_train_station == trento_bars.haversine_distance_to_train_station.min()].name.values[0]

"""## find the distance of each bar to the train station"""

point_nearest_train_station= ox.get_nearest_node(G, point_train_station)

# we can assume 2km/h for each kind of street
hwy_walking_speeds = {
    'motorway ': 2,
    'trunk': 2,
    'primary': 2,
    'secondary': 2,
    'tertiary': 2,
    'unclassified': 2,
    'residential': 2,
    'pedestrian': 2,
    'living_street':2,
    'steps':2,
    'footway': 2,
    'track':2}
G = ox.add_edge_speeds(G,hwy_speeds=hwy_walking_speeds)

trento_bars['nearest_point_to_graph'] = trento_bars.geometry.representative_point().apply(lambda point: ox.get_nearest_node(G, (point.y,point.x)))

"""calculate the short path from the train station to each bar"""

trento_bars.nearest_point_to_graph.apply(lambda to_point: ox.shortest_path(G, point_nearest_train_station, to_point))

trento_bars['route_from_train_station'] = trento_bars.nearest_point_to_graph.apply(lambda to_point: ox.shortest_path(G, point_nearest_train_station, to_point))

"""create geometry of each path"""

def geometry_from_route(inG,route):
  points = []
  for idnode in route:
    lon = inG.nodes[idnode]['x']
    lat = inG.nodes[idnode]['y']
    point = Point(lon,lat)
    points.append(point)
  return(LineString(points))

trento_bars['linestring'] = trento_bars.route_from_train_station.apply(lambda route: geometry_from_route(G,route))

trento_bars.plot()

trento_bars.set_geometry('linestring').plot()

"""calculate time for each path"""

def travel_time_from_train_station(inG, route):
  edge_times = ox.utils_graph.get_route_edge_attributes(inG, route, 'travel_time')
  return (sum(edge_times))

def leght_path_from_train_station(inG, route):
  edge_lengths = ox.utils_graph.get_route_edge_attributes(inG, route, 'length')
  return (sum(edge_lengths))

trento_bars['travel_time_from_train_station'] = trento_bars.route_from_train_station.apply(lambda route: travel_time_from_train_station(G,route))

trento_bars['path_length_from_train_station'] = trento_bars.route_from_train_station.apply(lambda route: travel_time_from_train_station(G,route))

"""show the first 5 bars by harvesine distance"""

trento_bars.sort_values(by=['haversine_distance_to_train_station']).head(5)[['name','haversine_distance_to_train_station']]

"""show the first 5 bars by travel time distance (in seconds)"""

trento_bars.sort_values(by=['travel_time_from_train_station']).head(5)[['name','travel_time_from_train_station']]

"""## all the bar reachable in 5 minutes from the train station of Trento"""

import datetime

five_minutes_in_seconds = 5*60

five_minutes_in_seconds

bars_five_minutes_from_train_station = trento_bars[trento_bars.travel_time_from_train_station <= five_minutes_in_seconds]

bars_five_minutes_from_train_station = bars_five_minutes_from_train_station.sort_values(by=['travel_time_from_train_station'])

maps = []
texts = []
for index, row in bars_five_minutes_from_train_station.iterrows():
    name = row['name']
    travel_time_from_train_station = row['travel_time_from_train_station']
    minutes = str(datetime.timedelta(seconds=travel_time_from_train_station))
    distance = row['path_length_from_train_station']
    route = row['route_from_train_station']
    text = "the bar %s is %s meters from the train station and it's reachable in %s minutes" % (name, str(round(distance)), minutes[3:7])
    texts.append(text)
    maps.append(ox.plot_route_folium(G,route,popup_attribute='name',tiles='OpenStreetMap'))

len(maps)

texts[0]

maps[0]

texts[1]

maps[1]

texts[2]

maps[2]

texts[3]

maps[3]

texts[4]

maps[4]

texts[5]

maps[5]

texts[6]

maps[6]

points = bars_five_minutes_from_train_station[['name','geometry','addr:street','addr:housenumber','addr:city', 'travel_time_from_train_station','path_length_from_train_station']].set_geometry("geometry")

points

points['geometry'] = points.geometry.representative_point()

points

import folium

y = points.geometry.unary_union.centroid.y
x = points.geometry.unary_union.centroid.x
geojson = points.to_json()

map = folium.Map([y,x], zoom_start=16)
folium.GeoJson(geojson).add_to(map)
map